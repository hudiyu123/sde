#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

# Reference: https://www.gnu.org/software/gcc/svn.html
# Reference: https://gcc.gnu.org/wiki/HomePage
# Reference: https://d-meiser.github.io/2015/11/30/building-gcc-trunk.html
# Reference: http://www.linuxfromscratch.org/blfs/view/cvs/general/gcc.html

# Note: The GCC build process cannot seem to handle "@" characters
# in pathnames.

git_repo="git://gcc.gnu.org/git/gcc.git"

panic()
{
	echo "ERROR: $@"
	exit 1
}

isabspath()
{
	case "$1" in
	/*)
		echo "1";;
	*)
		echo "0";;
	esac
}

disk_usage()
{
	local dir="$1"
	du -sk "$dir" | awk '{print $1;}' -
}

validate_url()
{
	local url="$1"
	case "$url" in
	http*)
		wget -S --spider "$url" 2>&1 | grep -q "HTTP/1.1 200 OK"
		;;
	ftp*)
		wget -S --spider "$url" 2>&1 | grep -q -i "exists"
		;;
	*)
		return 2;;
	esac
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	echo "bad usage: $@"
	cat <<- EOF
	$0 [options] -v \$version -d \$install_dir

	Options
	=======

	--install-dir \$install_dir (alias -d)
	    Set the installation directory to \$install_dir.
	--version \$version (alias -v)
	    Set the version to install to \$version.
	--repo (alias -r)
	    Install from GNU GCC Subversion repository.
	--num-jobs \$num_jobs (alias -j)
	    Allow the use of \$num_jobs simultaneous jobs.
	--download-only (alias -x)
	    Download only but do not build and install.
	--patch \$patch_file (alias -p)
	    Apply the patch file \$patch_file before building.
	--no-cleanup (alias -C)
	    Disable cleanup.

	Environment Variables
	=====================

	SDE_TMPDIR
	    Specifies the directory under which temporary files are placed
	    (e.g., when building software prior to installation).

	Examples
	========

	$0 --version 8.2.0 --install-dir $HOME/local/gcc
	$0 --version 8.2.0 --enable-languages go --install-dir $HOME/local/gccgo

	$0 --method git --version releases/gcc-9.2.0 --install-dir $HOME/local/gcc
	$0 --method git --version master --install-dir $HOME/local/gcc
	SDE_TMPDIR=/var/tmp \\
	  $0 --method git --version master --install-dir $HOME/local/gcc

	SDE_TMPDIR=/var/tmp \\
	  $0 --version 11.1.0-RC-20210420 --install-dir $HOME/local/gcc

	commit=\$($0 --repo --print-commit --version master)
	SDE_TMPDIR=/var/tmp \\
	  $0 --method git --version \$commit -d /tmp/gcc-trunk-\$commit
	EOF
	exit 2
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

version=
install_dir=
from_repo=0

# Do not use user@host in the following pathname, since the GCC build
# process cannot seem to handle "@" characters in pathnames.
tmp_dir_template="${SDE_TMPDIR:-/tmp}/sde_install_gcc-$user-$host-XXXXXXXX"

default_pie=0
old_abi=0
num_jobs=4
download_only=0
patch_files=()
tmp_dir=
cleanup=1
print_commit=0
install_stripped=0
enable_languages=
method=web

while [ $# -gt 0 ]; do
	option="$1"
	case "$option" in

	--verbose)
		shift 1
		verbose=$((verbose + 1))
		;;
	--debug-level)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		debug_level="$1"
		shift 1
		if [ "$debug_level" -ge 1 ]; then
			set -xv
		fi
		;;
	--cleanup)
		shift 1
		cleanup=1
		;;
	--no-cleanup|-C)
		shift 1
		cleanup=0
		;;
	--strip)
		shift 1
		install_stripped=1
		;;
	--no-strip)
		shift 1
		install_stripped=0
		;;
	--install-dir|-d)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		install_dir="$1"
		shift 1
		;;
	--version|-v)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		version="$1"
		shift 1
		;;

	--default-pie)
		shift 1
		default_pie=1
		;;
	--no-default-pie)
		shift 1
		default_pie=0
		;;

	--old-abi)
		shift 1
		old_abi=1
		;;
	--no-old-abi)
		shift 1
		old_abi=0
		;;

	--repo|-r)
		shift 1
		from_repo=1
		;;

	--download-only|-x)
		shift 1
		download_only=1
		;;
	--print-commit|-n)
		shift 1
		print_commit=1
		;;

	--patch|-p)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		patch_files+=("$1")
		shift 1
		;;

	--enable-languages)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		enable_languages="$1"
		shift 1
		;;

	--num-jobs|-j)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		num_jobs="$1"
		shift 1
		;;

	--method)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		method="$1"
		shift 1
		;;

	--*|-*)
		usage "invalid option $option"
		;;
	*)
		break
		;;

	esac
done
shift $((OPTIND - 1))

if [ "$print_commit" -ne 0 ]; then
	if [ "$from_repo" -ne 0 ]; then
		if [ -z "$version" ]; then
			usage "no version specified"
		fi
		commit="$(git ls-remote "$git_repo" "$version" | \
		  awk -v x='refs/heads/'"$version" '{if ($2 == x) {print $1;}}')" || \
		  panic "git rev-parse failed"
		echo "$commit" || panic "echo failed"
	fi
	exit 0
fi

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

cat <<- EOF
Default PIE: $default_pie
Old ABI: $old_abi
Number of jobs: $num_jobs
Download only: $download_only
Patch files: ${patch_files[*]}
Cleanup: $cleanup
Strip: $install_stripped
Languages: $enable_languages
Method: $method
Version: $version
EOF

#abs_install_dir=$(readlink -f "$install_dir") || \
#  panic "cannot get absolute pathname"

abs_install_dir="$install_dir"
result=$(isabspath "$abs_install_dir") || panic "absolute path test failed"
if [ "$result" -eq 0 ]; then
	abs_install_dir="$cur_dir/$abs_install_dir"
fi

case "$method" in
git)
	from_repo=1;;
*)
	from_repo=0;;
esac

################################################################################
# Perform some setup.
################################################################################

start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

tmp_dir=$(mktemp -d "$tmp_dir_template") || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

make_opts=()
make_opts+=("-j$num_jobs")

mangled_version=$(echo "$version" | tr '/' '-') || \
  panic "cannot get mangled name"
top_dir="$tmp_dir/gcc-$mangled_version"
src_dir="$top_dir/src"
build_dir="$top_dir/build"
archive_dir="$top_dir/archive"
svn_dir="$top_dir/svn"

for dir in "$top_dir" "$archive_dir" "$src_dir" "$build_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

#unset INCLUDE_PATH CPLUS_INCLUDE_PATH CFLAGS CXXFLAGS

cat <<- EOF
============================================================
Starting installation process for GCC.

install directory: $abs_install_dir
temporary directory: $tmp_dir
version: $version
============================================================
EOF

################################################################################
# Download the software.
################################################################################

cat <<- EOF
============================================================
Downloading software.
============================================================
EOF

download_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $download_start_time"

if [ $from_repo -ne 0 ]; then

	echo "CLONING REPOSITORY"
	git clone --progress "$git_repo" "$src_dir" || \
	  panic "cannot clone repository"
	(cd "$src_dir" && git checkout "$version") || \
	  panic "cannot checkout"

	echo "RUNNING GIT LOG"
	(cd "$src_dir" && git --no-pager log -1) || \
	  panic "git log failed"
	commit="$(git ls-remote "$git_repo" "$version" | \
	  awk -v x='refs/heads/'"$version" '{if ($2 == x) {print $1;}}')" || \
	  panic "git rev-parse failed"
	echo "$commit" || \
	  panic "echo failed"

else

	urls=()
	urls+=("https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.xz")
	urls+=("https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.bz2")
	urls+=("https://ftp.gnu.org/gnu/gcc/gcc-$version/gcc-$version.tar.gz")
	urls+=("https://gcc.gnu.org/pub/gcc/snapshots/$version/gcc-$version.tar.xz")
	urls+=("https://gcc.gnu.org/pub/gcc/snapshots/$version/gcc-$version.tar.gz")
	url=
	for i in "${urls[@]}"; do
		validate_url "$i"
		status=$?
		if [ "$status" -eq 0 ]; then
			url="$i"
			break
		fi
	done
	if [ -z "$url" ]; then
		panic "cannot find archive for download"
	fi
	archive_base=$(basename "$url") || panic "cannot get basename"
	archive_file="$archive_dir/$archive_base"
	(cd "$archive_dir" && wget -O "$archive_file" "$url" ) || \
	  panic "cannot download archive"
	tar_options=()
	case "$archive_file" in
	*.gz)
		tar_options+=(-z);;
	*.bz2)
		tar_options+=(-j);;
	*.xz)
		tar_options+=(-J);;
	*)
		panic "unexpected file type";;
	esac
	tar -x "${tar_options[@]}" -f "$archive_file" -C "$src_dir" \
	  --strip-components=1 || \
	  panic "cannot extract archive"
	commit=

fi

(cd "$src_dir" && ./contrib/download_prerequisites) || \
  panic "cannot download prerequisites"

src_dir_space=$(disk_usage "$src_dir")
echo "SOURCE DIRECTORY DISK USAGE $src_dir_space"

for patch_file in "${patch_files[@]}"; do
	abs_patch_file=$(realpath "$patch_file") || \
	  panic "cannot get real path"
	(cd "$src_dir" && patch -p1 < "$abs_patch_file") || \
	  panic "patch failed for $patch_file"
done

if [ "$download_only" -ne 0 ]; then
	# Note: Do not cleanup.
	exit 0
fi

################################################################################
# Configure the software.
################################################################################

cat <<- EOF
============================================================
Configuring software.
============================================================
EOF

configure_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $configure_start_time"

options=()
if [ "$old_abi" -ne 0 ]; then
	options+=(--with-default-libstdcxx-abi=gcc4-compatible)
fi
if [ -n "$default_pie" ]; then
	if [ "$default_pie" -ne 0 ]; then
		options+=(--enable-default-pie)
	else
		options+=(--enable-default-pie=no)
	fi
fi
options+=(--enable-threads=posix)
options+=(--enable-tls)
options+=(--disable-multilib)
if [ -n "$enable_languages" ]; then
	options+=(--enable-languages="$enable_languages")
fi
echo "CONFIGURE OPTIONS: ${options[*]}"
(cd "$build_dir" && 
  ../src/configure --prefix="$abs_install_dir" "${options[@]}") || \
  panic "configure failed"

################################################################################
# Build the software.
################################################################################

cat <<- EOF
============================================================
Building software.
============================================================
EOF

build_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $build_start_time"

(cd "$build_dir" && make "${make_opts[@]}") || \
  panic "make failed"

################################################################################
# Install the software.
################################################################################

cat <<- EOF
============================================================
Installing software.
============================================================
EOF

install_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $install_start_time"

if [ "$install_stripped" -ne 0 ]; then
	install_target="install-strip"
else
	install_target="install"
fi
(cd "$build_dir" && make "$install_target") || \
  panic "make install failed"

if [ "$from_repo" -ne 0 ]; then
	echo "$commit" > "$install_dir/.version" || \
	  panic "cannot make version file"
fi

################################################################################
# Print some information about the installation process.
################################################################################

cat <<- EOF
============================================================
Done.
============================================================
EOF

end_time=$(date +%Y-%m-%d@%H:%M:%S)

echo "start time ............. $start_time"
echo "download start time .... $download_start_time"
echo "configure start time ... $configure_start_time"
echo "build start time ....... $build_start_time"
echo "install start time ..... $install_start_time"
echo "end time ............... $end_time"

tmp_dir_space=$(disk_usage "$tmp_dir")
src_dir_space=$(disk_usage "$src_dir")
build_dir_space=$(disk_usage "$build_dir")
echo "TEMPORARY DIRECTORY DISK USAGE $tmp_dir_space"
echo "SOURCE DIRECTORY DISK USAGE $src_dir_space"
echo "BUILD DIRECTORY DISK USAGE $build_dir_space"

exit 0

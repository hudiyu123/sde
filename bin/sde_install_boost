#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

#set -xv

# Reference: http://www.boost.org/doc/libs/1_61_0/more/getting_started/unix-variants.html

panic()
{
	echo "ERROR"
	exit 1
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	echo "$@"
	cat <<- EOF
	usage:
	$0 [options]

	Options
	=======

	-d \$install_dir
	    Set the installation directory to \$install_dir.
	-v \$version
	    Set the version to install to \$version (e.g., 1.66.0).
	-b \$b2_config_data
	-c
	    Omit CMake configuration.


	Environment Variables
	=====================

	SDE_BOOST_CONFIG_DATA

	Examples
	========

	$0 -c -v 1.74.0 -d boost-1.74.0
	EOF
	exit 2
}

self_path="$(realpath "$0")" || panic "cannot get program path"
self_dir="$(dirname "$self_path")" || panic "cannot get program directory"
sde_validate_url="$self_dir/sde_validate_url"

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"
tmp_dir=

tmp_dir_template="${SDE_TMPDIR:-/tmp}/sde_install_boost-$user@$host-XXXXXXXX"
#tmp_dir="${SDE_TMPDIR:-/tmp}/sde_install_boost-$user-$host-$$"
version=
install_dir=
toolset=gcc
omit_cmake_config=0
cleanup=1
config_data="$SDE_BOOST_CONFIG_DATA"
python_hack=0

while getopts Cd:v:cb:p opt; do
	case "$opt" in
	C)
		cleanup=0;;
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	c)
		omit_cmake_config=1;;
	b)
		config_data="$OPTARG";;
	p)
		python_hack=1;;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

abs_install_dir=$(readlink -f "$install_dir") || \
  panic "cannot get absolute pathname"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

tmp_dir=$(mktemp -d "$tmp_dir_template") || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi
echo "temporary directory: $tmp_dir"

make_opts="-j2"

top_dir="$tmp_dir/boost-$version"
archive_dir="$top_dir/archive"
src_dir="$top_dir/src"
build_dir="$top_dir/build"

for dir in "$top_dir" "$archive_dir" "$src_dir" "$build_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

filename_version=$(echo "$version" | tr . _) || panic "failed"

urls=()
urls+=("https://sourceforge.net/projects/boost/files/boost/$version/boost_${filename_version}.tar.bz2")
urls+=("https://sourceforge.net/projects/boost/files/boost/$version/boost_${filename_version}.tar.gz")
urls+=("https://dl.bintray.com/boostorg/release/$version/source/boost_${filename_version}.tar.bz2")
urls+=("https://dl.bintray.com/boostorg/release/$version/source/boost_${filename_version}.tar.gz")

download_status=1
for url in "${urls[@]}"; do

	"$sde_validate_url" "$url"
	status=$?
	if [ "$status" -eq 0 ]; then
		(cd "$archive_dir" && wget "$url")
		download_status=$?
		if [ "$download_status" -eq 0 ]; then
			#archive_file="$archive_dir/boost_${filename_version}.tar.gz"
			archive_base=$(basename "$url") || panic "basename failed"
			archive_file="$archive_dir/$archive_base"
			break
		fi
	fi
	echo "cannot download from $url"

done

if [ "$download_status" -ne 0 ]; then
	panic "cannot download"
fi

tar_options=()
case "$archive_file" in
*.tar.gz|*.tgz)
	tar_options+=(-z);;
*.tar.bz2)
	tar_options+=(-j);;
*.tar.xz)
	tar_options+=(-J);;
*)
	panic "unknown format";;
esac

tar -x "${tar_options[@]}" -f "$archive_file" -C "$src_dir" \
  --strip-components=1 || \
  panic "cannot extract archive"

#(cd "$src_dir/tools/build" && ./bootstrap.sh --prefix="$install_dir") || \
#  panic "cannot bootstrap"
#
#(cd "$src_dir/tools/build" && ./b2 install --prefix="$install_dir") || \
#  panic "cannot install Boost.Build"
#
#extended_path="$PATH:$install_dir/bin"
#
#(cd "$src_dir" && \
#  PATH="$extended_path" b2 --build-dir="$build_dir" --build-type=complete \
#  toolset="$toolset" stage) || \
#  panic "cannot build"

env=()
if [ "$python_hack" -ne 0 ]; then
	python_program=python
	pyconfig_file=$("$python_program" \
	  -c 'import sysconfig; print(sysconfig.get_config_h_filename())') || \
	  panic
	python_inc_dir=$(dirname "$pyconfig_file") || panic
	env+=("CPLUS_INCLUDE_PATH=$python_in_dir")
	echo "Python include directory $python_inc_dir"
fi

bootstrap_options=()
bootstrap_options+=(--prefix="$abs_install_dir")
(cd "$src_dir" && env "${env[@]}" ./bootstrap.sh "${bootstrap_options[@]}") || \
  panic "cannot bootstrap"

config_file="$tmp_dir/config.jam"
if [ -n "$config_data" ]; then
	echo "$config_data" > "$config_file" || \
	  panic "cannot create config file"
	cat <<- EOF
	B2 CONFIG FILE CONTENTS:
	============================================================
	$(cat "$config_file")
	============================================================
	EOF
fi

b2_options=()
b2_options+=(-q)
if [ -n "$config_data" ]; then
	b2_options+=(--user-config="$config_file")
fi
(cd "$src_dir" && env "${env[@]}" ./b2 "${b2_options[@]}" install) || \
  panic "build failed"

#rm -rf "$tmp_dir"

if [ "$omit_cmake_config" -ne 0 ]; then
	# Prevent the use of the flakey CMake config files.
	# Rely on the Boost config files that are included with CMake instead.
	targets=()
	for i in $install_dir/lib*/cmake; do
		if [ -e "$i" ]; then
			targets+=("$i")
		fi
	done
	for target in "${targets[@]}"; do
		if [ -e "$target" ]; then
			mv "$target" "$target-DO_NOT_USE" || \
			  panic "cannot rename directory"
		fi
	done
fi

exit 0

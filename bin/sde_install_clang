#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2022 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

################################################################################

# Reference: http://llvm.org/releases/download.html
# Reference: http://llvm.org/docs/GettingStarted.html
# Reference: https://llvm.org/docs/GettingStarted.html#checkout
# Reference: http://llvm.org/docs/GettingStarted.html#compiling-the-llvm-suite-source-code
# Reference: https://github.com/llvm/llvm-project
# Reference: https://libcxx.llvm.org/BuildingLibcxx.html
# Reference: https://llvm.org/docs/CMake.html
# Reference: http://clang.llvm.org/get_started.html

################################################################################
# Configuration
################################################################################

git_repo_url="https://github.com/llvm/llvm-project.git"
github_archive_base_url="https://github.com/llvm/llvm-project/releases/download"

example_clang_version=14.0.6
example_clang_tag=llvmorg-14.0.6

################################################################################
# Functions
################################################################################

panic()
{
	echo "ERROR: $*"
	exit 1
}

version_to_version_id()
{
	local version="$1"
	local pattern='-rc[0-9]+'
	local version_id="$version"
	if [[ "$version" =~ $pattern ]]; then
		version_id="$(sed -e 's/-rc/rc/' <<< "$version")" || return 1
	fi
	echo "$version_id"
}

isabspath()
{
	case "$1" in
	/*)
		echo "1";;
	*)
		echo "0";;
	esac
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	echo "BAD USAGE: $@"
	cat <<- EOF
	Usage:
	$0 [options] -v \$version -d \$install_dir

	Options
	=======

	--debug-level \$level
	    Set the debug level to \$level.
	--no-cleanup
	    Disable cleanup of the temporary directory.
	--enable-libc
	    Install libc.
	--enable-libcxx
	    Install libcxx.
	-d|--install-dir \$install_dir
	    Set the install directory to \$install_dir.
	--gcc-dir \$gcc_dir
	    Set the GCC directory to \$gcc_dir.
	-r|--repo
	    Build from the Git repository.
	--stop-early
	    Stop before building.
	--num-jobs \$num_jobs
	    Allow the use of \$num_jobs simultaneous jobs.
	--num-parallel-compile-jobs \$n
	    Allow the use of \$n simultaneous compile jobs.
	--num-parallel-link-jobs \$n
	    Allow the use of \$n simultaneous link jobs.
	--print-commit
	    Print the Git repository commit and exit.
	-v|--version \$version
	    Set the version to be installed to \$version.
	--enable-shared-libllvm
	    Make libllvm shared.
	--enable-test-suite
	    Install the test suite.
	--enable-flang
	    Install flang (i.e., Fortran compiler).
	--enable-lldb
	    Install lldb.
	--tmp-dir-templates \$template_path
	    Set the temporary directory template pathname \$template_path.
	--enable-static-libstdcxx
	    Use static libstdc++.
	--old-host-toolchain
	    Use the old host toolchain.

	Environment Variables
	=====================

	SDE_INSTALL_CLANG_STRIPPED
	    Install stripped executables.
        Valid values: 0, 1

	Examples
	========

	$0 -v 9.0.1 -d /tmp/clang
	SDE_TMPDIR=/var/tmp CC=gcc CXX=g++ $0 -r -v main -d /tmp/clang

	Perform a trunk install:
	commit=\$($0 --repo -v main -n)
	SDE_TMPDIR=/var/tmp CC=gcc CXX=g++ $0 -r -v \$commit -d /tmp/clang-trunk-\$commit

	Print the latest commit on main branch:
	$0 --repo -v main -n

	Perform a debug-build install with libc++, OpenMP, OpenCL:
	SDE_TMPDIR=/var/tmp \\
	  $0 --num-jobs 4 --build-type Debug --keep-source --enable-assertions \\
	  --no-enable-libc --enable-libcxx --enable-openmp --enable-libclc \\
	  --enable-shared-libllvm --enable-rtti --enable-eh \\
	  --repo -v $example_clang_tag -d /tmp/clang-$example_clang_tag-debug

	Perform a release-with-debug-information install with libc++,
	OpenMP, OpenCL (and RTTI and EH enabled):
	SDE_TMPDIR=/var/tmp \\
	  $0 --num-parallel-compile-jobs 4 --num-parallel-link-jobs 1 \\
	  --build-type RelWithDebInfo --keep-source --enable-assertions \\
	  --no-enable-libc --enable-libcxx --enable-openmp --enable-libclc \\
	  --enable-shared-libllvm --enable-rtti --enable-eh \\
	  --repo -v $example_clang_tag \\
	  -d /tmp/clang-$example_clang_tag-relwithdebinfo

	Perform an install without removing the temporary directory:
	$0 --tmp-dir-template /var/tmp/sde_tmp-XXXX --no-cleanup \\
	  --num-jobs 4 --strip \\
	  -v $example_clang_version -d /tmp/clang-$example_clang_version \\
	  --enable-shared-libllvm --enable-libcxx

	CMAKE_TOOLCHAIN_FILE=$HOME/public/sde/toolchains/clang-default.cmake \\
	  $0 --tmp-dir-template /var/tmp/sde_tmp-XXXX --num-jobs 4 --strip \\
	  -v $example_clang_version -d /tmp/clang-$example_clang_version \\
	  --enable-shared-libllvm --enable-libcxx \\
	  --no-libcxx-enable-abi-linker-script --no-cleanup
	EOF
	exit 2
}

################################################################################
# Parse command line options.
################################################################################

cur_dir="$(pwd)" || panic "cannot get current directory"
# Ensure that cur_dir is an absolute path.
cur_dir="$(realpath "$cur_dir")" || panic "realpath failed"

cmake_generator="Unix Makefiles"
tmp_dir=
tmp_dir_template="${SDE_TMPDIR:-/tmp}/sde_install_clang-XXXXXXXX"
version=
install_dir=
gcc_dir=""
use_old_host_toolchain=0
from_repo=0
stop_early=0
num_jobs=
num_compile_jobs=
num_link_jobs=
cleanup=1
print_commit=0
debug_level="${SDE_DEBUG_LEVEL:-0}"
build_as_runtimes=0

keep_source=0
cmake_build_type=Release
llvm_enable_rtti=
llvm_enable_eh=
llvm_enable_assertions=
libcxx_enable_abi_linker_script=
enable_shared_libllvm=0
install_flang=0
install_lldb=0
install_libc=0
install_libcxx=0
install_libclc=0
install_openmp=1
use_static_libstdcxx=0
install_testsuite=0
install_stripped="${SDE_INSTALL_CLANG_STRIPPED:-0}"

while [ $# -gt 0 ]; do
	option="$1"
	case "$option" in
	--verbose)
		shift 1
		verbose=$((verbose + 1))
		;;
	--debug-level)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		debug_level="$1"
		shift 1
		if [ "$debug_level" -ge 1 ]; then
			set -xv
		fi
		;;
	--cleanup)
		shift 1
		cleanup=1
		;;
	--no-cleanup|-C)
		shift 1
		cleanup=0
		;;
	--strip)
		shift 1
		install_stripped=1
		;;
	--no-strip)
		shift 1
		install_stripped=0
		;;
	--enable-libc)
		shift 1
		install_libc=1
		;;
	--no-enable-libc)
		shift 1
		install_libc=0
		;;
	--enable-libcxx|-l)
		shift 1
		install_libcxx=1
		;;
	--no-enable-libcxx)
		shift 1
		install_libcxx=0
		;;
	--enable-libclc)
		shift 1
		install_libclc=1
		;;
	--no-enable-libclc)
		shift 1
		install_libclc=0
		;;
	--enable-openmp)
		shift 1
		install_openmp=1
		;;
	--no-enable-openmp)
		shift 1
		install_openmp=0
		;;
	--install-dir|-d)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		install_dir="$1"
		shift 1
		;;
	--gcc-dir|-g)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		gcc_dir="$1"
		shift 1
		;;
	--repo|-r)
		shift 1
		from_repo=1
		;;
	--stop-early|-S)
		shift 1
		stop_early=1
		;;

	--num-jobs|-j)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		num_jobs="$1"
		shift 1
		;;
	--num-parallel-compile-jobs)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		num_compile_jobs="$1"
		shift 1
		;;
	--num-parallel-link-jobs)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		num_link_jobs="$1"
		shift 1
		;;

	--print-commit|-n)
		shift 1
		print_commit=1
		;;
	--version|-v)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		version="$1"
		shift 1
		;;
	--enable-shared-libllvm|-Y)
		shift 1
		enable_shared_libllvm=1
		;;
	--no-enable-shared-libllvm)
		shift 1
		enable_shared_libllvm=0
		;;
	--enable-test-suite|-t)
		shift 1
		install_testsuite=1
		;;
	--no-enable-test-suite)
		shift 1
		install_testsuite=0
		;;
	--enable-flang|-F)
		shift 1
		install_flang=1
		;;
	--no-enable-flang)
		shift 1
		install_flang=0
		;;
	--enable-lldb|-D)
		shift 1
		install_lldb=1
		;;
	--no-enable-lldb)
		shift 1
		install_lldb=0
		;;
	--tmp-dir-template|-T)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		tmp_dir_template="$1"
		shift 1
		;;
	--enable-static-libstdcxx)
		shift 1
		use_static_libstdcxx=1
		;;
	--no-enable-static-libstdcxx|-x)
		shift 1
		use_static_libstdcxx=0
		;;
	--old-host-toolchain|-f)
		shift 1
		use_old_host_toolchain=1
		;;
	--cmake-generator)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		cmake_generator="$1"
		shift 1
		;;
	--ninja)
		shift 1
		cmake_generator="Ninja"
		;;

	--libcxx-enable-abi-linker-script)
		shift 1
		libcxx_enable_abi_linker_script=1
		;;
	--no-libcxx-enable-abi-linker-script)
		shift 1
		libcxx_enable_abi_linker_script=0
		;;

	--enable-assertions)
		shift 1
		llvm_enable_assertions=1
		;;
	--no-enable-assertions)
		shift 1
		llvm_enable_assertions=0
		;;

	--enable-rtti)
		shift 1
		llvm_enable_rtti=1
		;;
	--no-enable-rtti)
		shift 1
		llvm_enable_rtti=0
		;;

	--enable-eh)
		shift 1
		llvm_enable_eh=1
		;;
	--no-enable-eh)
		shift 1
		llvm_enable_eh=0
		;;

	--keep-source)
		shift 1
		keep_source=1
		;;
	--no-keep-source)
		shift 1
		keep_source=0
		;;

	--build-type)
		shift 1
		[ $# -gt 0 ] || usage "missing argument"
		cmake_build_type="$1"
		shift 1
		;;

	--as-runtimes)
		shift 1
		build_as_runtimes=1
		;;
	--no-as-runtimes)
		shift 1
		build_as_runtimes=0
		;;

	--*|-*)
		usage "invalid option $option"
		;;
	*)
		break
		;;
	esac
done
shift $((OPTIND - 1))

if [ "$debug_level" -ge 10 ]; then
	set -xv
fi

if [ "$print_commit" -ne 0 ]; then
	if [ "$from_repo" -ne 0 ]; then
		if [ -z "$version" ]; then
			usage "no version specified"
		fi
		commit="$(git ls-remote "$git_repo_url" "$version" | \
		  awk -v x='refs/heads/'"$version" '{if ($2 == x) {print $1;}}')" || \
		  panic "git rev-parse failed"
		echo "$commit" || panic "echo failed"
	fi
	exit 0
fi

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

abs_install_dir="$install_dir"
result=$(isabspath "$abs_install_dir") || panic "absolute path test failed"
if [ "$result" -eq 0 ]; then
	abs_install_dir="$cur_dir/$abs_install_dir"
fi

################################################################################
# Perform some setup.
################################################################################

start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

tmp_dir=$(mktemp -d "$tmp_dir_template") || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

mangled_version=$(echo "$version" | tr '/' '-') || panic
top_dir="$tmp_dir/llvm-clang-$mangled_version"
archive_dir="$top_dir/archives"
build_dir="$top_dir/build"

if [ "$keep_source" -ne 0 ]; then
	source_dir="$install_dir/.sde/src"
	git_dir="$install_dir/.sde/git"
else
	source_dir="$top_dir/src"
	git_dir="$top_dir/git"
fi

version_id="$(version_to_version_id "$version")" || panic

github_archive_url="$github_archive_base_url/llvmorg-$version/llvm-project-$version_id.src.tar.xz"

archive_filename="$(basename "$github_archive_url")" || panic
archive_file="$archive_dir/$archive_filename"

################################################################################
# Select the projects to build and install.
################################################################################

projects=()
other_projects=()
runtimes=()
targets=()

projects+=(clang)
projects+=(clang-tools-extra)
#other_projects+=(compiler-rt)
projects+=(compiler-rt)
if [ "$install_flang" -ne 0 ]; then
	projects+=(flang)
	projects+=(mlir)
fi
#projects+=(debuginfo-tests) # Note: This causes configuration errors.
if [ "$install_libc" -ne 0 ]; then
	other_projects+=(libc)
fi
if [ "$install_libcxx" -ne 0 ]; then
	runtimes+=(libcxx)
	runtimes+=(libcxxabi)
fi
runtimes+=(libunwind)
projects+=(lld)
if [ "$install_lldb" -ne 0 ]; then
	projects+=(lldb)
fi
if [ "$install_openmp" -ne 0 ]; then
	other_projects+=(openmp)
fi
if [ "$install_libclc" -ne 0 ]; then
	other_projects+=(libclc)
fi
projects+=(polly)
#projects+=(parallel-libs)
#projects+=(pstl)
if [ "$install_testsuite" -ne 0 ]; then
	projects+=(test-suite)
fi

if [ "$build_as_runtimes" -ne 0 ]; then
	runtimes=("${runtimes[@]}" "${other_projects[@]}")
else
	projects=("${projects[@]}" "${other_projects[@]}")
fi

################################################################################
#
################################################################################

if [ "${#projects[@]}" -gt 0 ]; then
	projects_string=$(tr ' ' ';' <<< "${projects[@]}") || \
	  panic "internal error"
else
	projects_string=
fi

if [ "${#runtimes[@]}" -gt 0 ]; then
	runtimes_string=$(tr ' ' ';' <<< "${runtimes[@]}") || \
	  panic "internal error"
else
	runtimes_string=
fi

if [ "${#targets[@]}" -gt 0 ]; then
	targets_string=$(tr ' ' ';' <<< "${targets[@]}") || \
	  panic "internal error"
else
	targets_string=
fi

################################################################################
# Start.
################################################################################

cat <<- EOF
============================================================
Starting installation process for Clang.

install directory: $abs_install_dir
temporary directory: $tmp_dir
version: $version
projects: $projects_string
============================================================
EOF

if [ 1 -ne 0 ]; then
	cat <<- EOF
	top_dir $top_dir
	source_dir $source_dir
	git_dir $git_dir
	build_dir $build_dir
	install_dir $install_dir
	abs_install_dir $abs_install_dir
	archive_dir $archive_dir
	archive_file $archive_file
	version_id $version_id
	github_archive_url $github_archive_url
	EOF
fi

#exit 0

for dir in "$top_dir" "$archive_dir" "$source_dir" "$build_dir" "$git_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

################################################################################
# Download the software.
################################################################################

cat <<- EOF
============================================================
Downloading software
============================================================
EOF

download_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $download_start_time"

if [ "$from_repo" -ne 0 ]; then

	echo "Downloading from repository with URL $git_repo_url"

	echo "CLONING REPOSITORY"
	git clone --progress "$git_repo_url" "$git_dir" || \
	  panic "cannot clone repository"
	(cd "$git_dir" && git checkout "$version") || \
	  panic "cannot checkout"
	commit="$(cd "$git_dir" && git rev-parse HEAD)" || \
	  panic "cannot get commit"
	echo "Checked out commit: $commit" || panic "echo failed"

	echo "RUNNING GIT LOG"
	(cd "$git_dir" && git --no-pager log -1) || panic "git log failed"

	main_source_dir="$git_dir/llvm"

else

	main_source_dir="$source_dir/llvm"

	wget -O "$archive_file" "$github_archive_url" || panic

	tar -x -J --strip-components 1 -f "$archive_file" -C "$source_dir" || \
	  panic

fi

################################################################################
# Configure the software.
################################################################################

if [ "$stop_early" -ne 0 ]; then
	cleanup=0
	exit 0
fi

cat <<- EOF
============================================================
Configuring software
============================================================
EOF

configure_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $configure_start_time"

configure_options=()

configure_options+=(-G "$cmake_generator")
configure_options+=(-DCMAKE_INSTALL_PREFIX="$abs_install_dir")
configure_options+=(-DCMAKE_BUILD_TYPE="$cmake_build_type")
configure_options+=(-DCMAKE_VERBOSE_MAKEFILE=true)

if [ -n "$projects_string" ]; then
	configure_options+=("-DLLVM_ENABLE_PROJECTS=$projects_string")
fi
if [ -n "$runtimes_string" ]; then
	configure_options+=("-DLLVM_ENABLE_RUNTIMES=$runtimes_string")
fi
if [ -n "$targets_string" ]; then
	configure_options+=("-DLLVM_RUNTIME_TARGETS=$targets_string")
fi

if [ -n "$num_compile_jobs" ]; then
	configure_options+=("-DLLVM_PARALLEL_COMPILE_JOBS=$num_compile_jobs")
fi
if [ -n "$num_link_jobs" ]; then
	configure_options+=("-DLLVM_PARALLEL_LINK_JOBS=$num_link_jobs")
fi

if [ "$use_static_libstdcxx" -ne 0 ]; then
    configure_options+=(-DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++")
fi

if [ "$use_old_host_toolchain" -ne 0 ]; then
    configure_options+=(-DLLVM_FORCE_USE_OLD_HOST_TOOLCHAIN=true)
fi

#configure_options+=(-DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=true)

if [ -n "$libcxx_enable_abi_linker_script" ]; then
	if [ "$libcxx_enable_abi_linker_script" -ne 0 ]; then
		configure_options+=(-DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=true)
	else
		configure_options+=(-DLIBCXX_ENABLE_ABI_LINKER_SCRIPT=false)
	fi
fi

if [ -n "$llvm_enable_assertions" ]; then
	if [ "$llvm_enable_assertions" -ne 0 ]; then
		configure_options+=(-DLLVM_ENABLE_ASSERTIONS=true)
	else
		configure_options+=(-DLLVM_ENABLE_ASSERTIONS=false)
	fi
fi

if [ -n "$llvm_enable_rtti" ]; then
	if [ "$llvm_enable_rtti" -ne 0 ]; then
		configure_options+=(-DLLVM_ENABLE_RTTI=true)
	else
		configure_options+=(-DLLVM_ENABLE_RTTI=false)
	fi
fi

if [ -n "$llvm_enable_eh" ]; then
	if [ "$llvm_enable_eh" -ne 0 ]; then
		configure_options+=(-DLLVM_ENABLE_EH=true)
	else
		configure_options+=(-DLLVM_ENABLE_EH=false)
	fi
fi

if [ -n "$gcc_dir" ]; then
	configure_options+=(-DCMAKE_C_COMPILER="${gcc_dir}/bin/gcc")
	configure_options+=(-DCMAKE_CXX_COMPILER="${gcc_dir}/bin/g++")
	configure_options+=(-DGCC_INSTALL_PREFIX="${gcc_dir}")
#	configure_options+=(-DCMAKE_CXX_LINK_FLAGS="-L${gcc_dir}/lib64 -Wl,-rpath,${gcc_dir}/lib64")
fi

if [ "$enable_shared_libllvm" -ne 0 ]; then
	configure_options+=(-DLLVM_BUILD_LLVM_DYLIB=1)
else
	configure_options+=(-DLLVM_BUILD_LLVM_DYLIB=0)
fi

####configure_options+=(-DLLVM_ENABLE_LIBCXX=0)
####configure_options+=(-DLLVM_STATIC_LINK_CXX_STDLIB=0)
####configure_options+=(-DLLVM_LOCAL_RPATH=1)
####configure_options+=(-DLLVM_BUILD_STATIC=1)

echo "RUNNING: cmake -H$main_source_dir -B$build_dir ${configure_options[*]}"
cmake -H"$main_source_dir" -B"$build_dir" "${configure_options[@]}" || \
  panic "cmake configure failed"

################################################################################
# Build the software.
################################################################################

cat <<- EOF
============================================================
Building software
============================================================
EOF

build_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $build_start_time"

build_options=()
if [ -n "$num_jobs" ]; then
	build_options+=(-j $num_jobs)
fi

cmake --build "$build_dir" "${build_options[@]}" || \
  panic "build failed"

################################################################################
# Install the software.
################################################################################

cat <<- EOF
============================================================
Installing software
============================================================
EOF

install_start_time=$(date +%Y-%m-%d@%H:%M:%S) || panic "cannot get time"
echo "time: $install_start_time"

if [ "$install_stripped" -ne 0 ]; then
	install_target="install/strip"
else
	install_target="install"
fi

cmake --build "$build_dir" --target "$install_target" || \
  panic "cmake install failed"

if [ "$from_repo" -ne 0 ]; then
	echo "$commit" > "$abs_install_dir/.version" || \
	  panic "cannot make version file"
fi

################################################################################
# Complete.
################################################################################

cat <<- EOF
============================================================
Done.
============================================================
EOF

end_time=$(date +%Y-%m-%d@%H:%M:%S)

echo "start time ............. $start_time"
echo "download start time .... $download_start_time"
echo "configure start time ... $configure_start_time"
echo "build start time ....... $build_start_time"
echo "install start time ..... $install_start_time"
echo "end time ............... $end_time"

exit 0

#! /usr/bin/env bash

# __START_OF_LICENSE__
# 
# Copyright (c) 2017, 2018 Michael D. Adams
# All rights reserved.
# 
# This file is part of the SDE software.
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 3,
# or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public
# License along with this program; see the file LICENSE.  If not,
# see <http://www.gnu.org/licenses/>.
# 
# __END_OF_LICENSE__

# Reference: https://www.xorpd.net/blog/vim_python3_install.html

isabspath()
{
	case "$1" in
	/*)
		echo "1";;
	*)
		echo "0";;
	esac
}

perform_cleanup()
{
	if [ -n "$tmp_dir" -a -d "$tmp_dir" ]; then
		rm -rf "$tmp_dir" || \
		  echo "warning: cannot remove temporary directory $tmp_dir"
	fi
}

usage()
{
	echo "bad usage: $@"
	cat <<- EOF
	usage: $0 -v \$version -d \$install_dir

	Options:
	-m \$method
	    Method by which to obtain the software.
	    Valid values are: git and ftp.
	-v \$version
	    Set the version of the software for installation to \$version.
	-d \$install_dir
	    Set the installation directory to \$install_dir.
	EOF
	exit 2
}

panic()
{
	echo "ERROR"
	exit 1
}

user=$(whoami) || panic "cannot get user name"
host=$(hostname) || panic "cannot get host name"
cur_dir=$(pwd) || panic "cannot get current directory"

method=ftp
version=
install_dir=

tmp_dir_template="${SDE_TMPDIR:-/tmp}/sde_install_vim-$user@$host-XXXXXXXX"
tmp_dir=
cleanup=1

while getopts d:v:Cm: opt; do
	case "$opt" in
	C)
		cleanup=0;;
	d)
		install_dir="$OPTARG";;
	v)
		version="$OPTARG";;
	m)
		method="$OPTARG";;
	\?)
		usage
		break;;
	esac
done
shift $((OPTIND - 1))

if [ -z "$install_dir" ]; then
	usage "no installation directory specified"
fi
if [ -z "$version" ]; then
	usage "no version specified"
fi

case "$method" in
git)
	use_repo=1;;
*)
	use_repo=0;;
esac

abs_install_dir="$install_dir"
result=$(isabspath "$abs_install_dir") || panic "absolute path test failed"
if [ "$result" -eq 0 ]; then
	abs_install_dir="$cur_dir/$abs_install_dir"
fi

# Set the user file-creation mask to allow read and execute permissions
# for the group and others.
# This will help to increase the likelihood that the installed software
# will be accessible by all users.
umask 022

tmp_dir=$(mktemp -d "$tmp_dir_template") || \
  panic "cannot create temporary directory"
if [ "$cleanup" -ne 0 ]; then
	trap perform_cleanup EXIT
fi

top_dir="$tmp_dir/vim-$version"
archive_dir="$top_dir/archive"
src_dir="$top_dir/src"
#build_dir="$top_dir/build"

for dir in "$top_dir" "$archive_dir" "$src_dir"; do
	if [ ! -d "$dir" ]; then
		mkdir -p "$dir" || panic "cannot make directory $dir"
	fi
done

if [ "$use_repo" -ne 0 ]; then

	repo_url="https://github.com/vim/vim.git"

	(git clone "$repo_url" "$src_dir") || panic "cannot clone repository"

	(cd "$src_dir" && git checkout "$version") || panic "cannot checkout"

else

	urls=()
	urls+=("ftp://ftp.vim.org/pub/vim/unix/vim-$version.tar.bz2")
	urls+=("ftp://ftp.ca.vim.org/pub/vim/unix/vim-$version.tar.bz2")

	for url in "${urls[@]}"; do
		echo "downloading from $url"
		(cd "$archive_dir" && wget "$url")
		status=$?
		if [ "$status" -eq 0 ]; then
			break
		fi
		echo "download failed from $url"
	done
	if [ "$status" -ne 0 ]; then
		panic "cannot download archive"
	fi

	archive_file="$archive_dir/$(basename "$url")"
	tar -xjf "$archive_file" -C "$src_dir" --strip-components=1 || \
	  panic "cannot extract archive"

fi

options=()
options+=(--prefix="$abs_install_dir")
options+=(--enable-perlinterp)
options+=(--enable-pythoninterp)
options+=(--enable-python3interp)
options+=(--with-python3-command=python3)
options+=(--enable-rubyinterp)
options+=(--enable-cscope)
options+=(--enable-gui=auto)
options+=(--enable-gtk2-check)
options+=(--enable-gnome-check)
options+=(--with-features=huge)
options+=(--enable-multibyte)
options+=(--with-x)

#(cd "$src_dir/src" && make autoconf) || panic

#(cd "$src_dir/src" && ./configure) || \
#  panic "configure failed"

#(cd "$src_dir/src" && make distclean) || panic

#environment=()
#environment+=(CFLAGS="-I/usr/lib64/perl5/CORE/")

(cd "$src_dir" && ./configure "${options[@]}") || \
  panic "configure failed"

make_opts=("-j2")
(cd "$src_dir" && make "${make_opts[@]}") || \
  panic "make failed"

(cd "$src_dir" && make install) || \
  panic "make install failed"

#rm -rf "$tmp_dir" || panic "cannot remove temporary directory $tmp_dir"

exit 0
